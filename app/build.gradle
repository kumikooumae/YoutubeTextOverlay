import groovy.io.FileType

import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

ext {

    // Whether this theme supports third party theme systems
    SUPPORTS_THIRD_PARTY_SYSTEMS = false

    byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "substratum.theme.template"
        minSdkVersion 24
        targetSdkVersion 25
        versionCode 3
        versionName "3.0"
        buildConfigField "String", "IV_KEY", "\"" + IV_KEY + "\""
        buildConfigField "byte[]", "DECRYPTION_KEY", String.valueOf("\"" + KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
        buildConfigField "byte[]", "IV_KEY", String.valueOf("\"" + IV_KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")

        buildConfigField "boolean", "SUPPORTS_THIRD_PARTY_THEME_SYSTEMS", "\"" + SUPPORTS_THIRD_PARTY_SYSTEMS + "\""
        resValue "bool", "SUPPORTS_THIRD_PARTY_THEME_SYSTEMS", "" + SUPPORTS_THIRD_PARTY_SYSTEMS
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets-encrypted']
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.github.javiersantos:PiracyChecker:1.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

task encryptAssets {

    File encryptedAssets = new File(getProjectDir(), "/src/main/assets-encrypted")
    if (encryptedAssets.exists())
        encryptedAssets.delete()

    def list = []

    def dir = new File(getProjectDir(), "/src/main/assets")
    dir.eachFileRecurse (FileType.FILES) { file ->
        list << file
    }

    list.each {

        String path = it.getAbsolutePath().replace("assets", "assets-encrypted")
        File outFile = new File(path)
        if (outFile.exists()) {
            outFile.delete()
        }
        outFile.getParentFile().mkdirs()

        if (!it.getAbsolutePath().contains("overlays")) {
            FileInputStream fis = new FileInputStream(it)
            FileOutputStream fos = new FileOutputStream(new File(
                    it.getAbsolutePath().replace("assets", "assets-encrypted")))
            byte[] buffer = new byte[4096]
            int n = 0
            while ((n = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, n)
            }
            fis.close()
            fos.close()
        } else {
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
            SecretKey secret = new SecretKeySpec(KEY, "AES")
            IvParameterSpec iv = new IvParameterSpec(IV_KEY)

            cipher.init(Cipher.ENCRYPT_MODE, secret, iv)
            outFile = new File(path + ".enc")
            FileInputStream fis = new FileInputStream(it)
            FileOutputStream fos = new FileOutputStream(path + ".enc")

            byte[] input = new byte[64]
            int bytesRead
            while ((bytesRead = fis.read(input)) != -1) {
                byte[] output = cipher.update(input, 0, bytesRead)
                if (output != null) {
                    fos.write(output)
                }
            }
            byte[] output = cipher.doFinal()
            if (output != null) {
                fos.write(output)
            }
            fis.close()
            fos.flush()
            fos.close()
        }

        println it.getAbsolutePath()
    }
}

project.afterEvaluate {
    preBuild.dependsOn encryptAssets
}
repositories {
    mavenCentral()
}
